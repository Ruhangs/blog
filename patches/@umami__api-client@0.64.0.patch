diff --git a/dist/cjs/index.d.ts b/dist/cjs/index.d.ts
index 72c5cb4ded2bedfb57ab91c0c28571a7211b1cbe..bfc0e15b10ee1c2144ab4882a387eb1a3909cfe7 100644
--- a/dist/cjs/index.d.ts
+++ b/dist/cjs/index.d.ts
@@ -69,7 +69,11 @@ declare namespace Umami {
             value: number;
             change: number;
         };
-        uniques: {
+        visitors: {
+            value: number;
+            change: number;
+        };
+        visits: {
             value: number;
             change: number;
         };
@@ -146,7 +150,9 @@ declare class UmamiApiClient {
     authToken?: string;
     apiKey?: string;
     constructor(options: UmamiApiClientOptions);
-    setAuthToken(data: object): void;
+    setAuthToken(data: {
+        userId: string;
+    }): void;
     setSecret(secret: string): void;
     setApiEndPoint(url: string): void;
     getHeaders(headers?: any): any;
@@ -232,6 +238,11 @@ declare class UmamiApiClient {
     resetWebsite(websiteId: string): Promise<ApiResponse<Umami.Empty>>;
     getWebsites(params?: Umami.WebsiteSearchParams): Promise<ApiResponse<Umami.SearchResult<Umami.Website[]>>>;
     getWebsiteActive(websiteId: string): Promise<ApiResponse<Umami.WebsiteActive>>;
+    getWebsiteReports(websiteId: string): Promise<ApiResponse<Umami.Report[]>>;
+    getWebsiteValues(websiteId: string, params: {
+        startAt: number;
+        endAt: number;
+    }): Promise<ApiResponse<any>>;
     getWebsiteEventData(websiteId: string, params: {
         startAt: string;
         endAt: string;
@@ -284,13 +295,13 @@ declare class UmamiApiClient {
         browser?: string;
         device?: string;
         country?: string;
-        region: string;
+        region?: string;
         city?: string;
     }): Promise<ApiResponse<Umami.WebsitePageviews>>;
     getWebsiteStats(websiteId: string, params: {
         startAt: number;
         endAt: number;
-        url: string;
+        url?: string;
         referrer?: string;
         title?: string;
         query?: string;
@@ -330,8 +341,7 @@ declare class UmamiApiClient {
     deleteTeamWebsite(teamId: string, websiteId: string): Promise<ApiResponse<Umami.Empty>>;
     updateTeam(teamId: string, data: {
         name: string;
-        domain: string;
-        shareId: string;
+        accessCode: string;
     }): Promise<ApiResponse<Umami.Empty>>;
     deleteTeam(teamId: string): Promise<ApiResponse<Umami.Empty>>;
     login(username: string, password: string): Promise<{
diff --git a/dist/cjs/index.js b/dist/cjs/index.js
index 0d65b3bcbe2b5aa002b586f5c22fc46686c4b1cb..61c93521988a4a33b17a0948afb317b7bcda7101 100644
--- a/dist/cjs/index.js
+++ b/dist/cjs/index.js
@@ -24,32 +24,25 @@ var __assign = function () {
 function __awaiter(thisArg, _arguments, P, generator) {
     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
     return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) {
-            try {
-                step(generator.next(value));
-            }
-            catch (e) {
-                reject(e);
-            }
+        function fulfilled(value) { try {
+            step(generator.next(value));
         }
-        function rejected(value) {
-            try {
-                step(generator["throw"](value));
-            }
-            catch (e) {
-                reject(e);
-            }
+        catch (e) {
+            reject(e);
+        } }
+        function rejected(value) { try {
+            step(generator["throw"](value));
         }
+        catch (e) {
+            reject(e);
+        } }
         function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 }
 function __generator(thisArg, body) {
-    var _ = { label: 0, sent: function () {
-            if (t[0] & 1)
-                throw t[1];
-            return t[1];
-        }, trys: [], ops: [] }, f, y, t, g;
+    var _ = { label: 0, sent: function () { if (t[0] & 1)
+            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
     return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
     function verb(n) { return function (v) { return step([n, v]); }; }
     function step(op) {
@@ -116,6 +109,10 @@ function __generator(thisArg, body) {
         return { value: op[0] ? op[1] : void 0, done: true };
     }
 }
+typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
+    var e = new Error(message);
+    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
+};
 
 var log = debug__default["default"]('umami:api-client');
 var API_KEY_HEADER = 'x-umami-api-key';
@@ -315,6 +312,20 @@ var UmamiApiClient = (function () {
             });
         });
     };
+    UmamiApiClient.prototype.getWebsiteReports = function (websiteId) {
+        return __awaiter(this, void 0, void 0, function () {
+            return __generator(this, function (_a) {
+                return [2, this.get("websites/".concat(websiteId, "/reports"))];
+            });
+        });
+    };
+    UmamiApiClient.prototype.getWebsiteValues = function (websiteId, params) {
+        return __awaiter(this, void 0, void 0, function () {
+            return __generator(this, function (_a) {
+                return [2, this.get("websites/".concat(websiteId, "/values"), params)];
+            });
+        });
+    };
     UmamiApiClient.prototype.getWebsiteEventData = function (websiteId, params) {
         return __awaiter(this, void 0, void 0, function () {
             return __generator(this, function (_a) {
@@ -575,6 +586,18 @@ var UmamiApiClient = (function () {
             var _this = this;
             return __generator(this, function (_a) {
                 routes = [
+                    {
+                        path: /^admin\/users$/,
+                        get: function (_a, data) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
+                            return [2, this.getUsers(data)];
+                        }); }); },
+                    },
+                    {
+                        path: /^admin\/websites$/,
+                        get: function (_a, data) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
+                            return [2, this.getWebsites(data)];
+                        }); }); },
+                    },
                     {
                         path: /^event-data\/events$/,
                         get: function (_a, data) {
@@ -771,19 +794,10 @@ var UmamiApiClient = (function () {
                         },
                     },
                     {
-                        path: /^admin\/users$/,
+                        path: /^users$/,
                         get: function (_a, data) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
                             return [2, this.getUsers(data)];
                         }); }); },
-                    },
-                    {
-                        path: /^admin\/websites$/,
-                        get: function (_a, data) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
-                            return [2, this.getWebsites(data)];
-                        }); }); },
-                    },
-                    {
-                        path: /^users$/,
                         post: function (_a, data) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
                             return [2, this.createUser(data)];
                         }); }); },
@@ -875,6 +889,15 @@ var UmamiApiClient = (function () {
                             }); });
                         },
                     },
+                    {
+                        path: /^websites\/[0-9a-f-]+\/daterange$/,
+                        get: function (_a) {
+                            var id = _a[1];
+                            return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
+                                return [2, this.getWebsiteActive(id)];
+                            }); });
+                        },
+                    },
                     {
                         path: /^websites\/[0-9a-f-]+\/events$/,
                         get: function (_a, data) {
@@ -902,6 +925,13 @@ var UmamiApiClient = (function () {
                             }); });
                         },
                     },
+                    {
+                        path: /^websites\/[0-9a-f-]+\/reports$/,
+                        post: function (_a) {
+                            var id = _a[1];
+                            return _this.getWebsiteReports(id);
+                        },
+                    },
                     {
                         path: /^websites\/[0-9a-f-]+\/reset$/,
                         post: function (_a) {
@@ -925,6 +955,13 @@ var UmamiApiClient = (function () {
                             return _this.transferWebsite(id, data);
                         },
                     },
+                    {
+                        path: /^websites\/[0-9a-f-]+\/values$/,
+                        pogetst: function (_a, data) {
+                            var id = _a[1];
+                            return _this.getWebsiteValues(id, data);
+                        },
+                    },
                 ];
                 route = routes.find(function (_a) {
                     var path = _a.path;
diff --git a/dist/esm/index.d.ts b/dist/esm/index.d.ts
index 72c5cb4ded2bedfb57ab91c0c28571a7211b1cbe..bfc0e15b10ee1c2144ab4882a387eb1a3909cfe7 100644
--- a/dist/esm/index.d.ts
+++ b/dist/esm/index.d.ts
@@ -69,7 +69,11 @@ declare namespace Umami {
             value: number;
             change: number;
         };
-        uniques: {
+        visitors: {
+            value: number;
+            change: number;
+        };
+        visits: {
             value: number;
             change: number;
         };
@@ -146,7 +150,9 @@ declare class UmamiApiClient {
     authToken?: string;
     apiKey?: string;
     constructor(options: UmamiApiClientOptions);
-    setAuthToken(data: object): void;
+    setAuthToken(data: {
+        userId: string;
+    }): void;
     setSecret(secret: string): void;
     setApiEndPoint(url: string): void;
     getHeaders(headers?: any): any;
@@ -232,6 +238,11 @@ declare class UmamiApiClient {
     resetWebsite(websiteId: string): Promise<ApiResponse<Umami.Empty>>;
     getWebsites(params?: Umami.WebsiteSearchParams): Promise<ApiResponse<Umami.SearchResult<Umami.Website[]>>>;
     getWebsiteActive(websiteId: string): Promise<ApiResponse<Umami.WebsiteActive>>;
+    getWebsiteReports(websiteId: string): Promise<ApiResponse<Umami.Report[]>>;
+    getWebsiteValues(websiteId: string, params: {
+        startAt: number;
+        endAt: number;
+    }): Promise<ApiResponse<any>>;
     getWebsiteEventData(websiteId: string, params: {
         startAt: string;
         endAt: string;
@@ -284,13 +295,13 @@ declare class UmamiApiClient {
         browser?: string;
         device?: string;
         country?: string;
-        region: string;
+        region?: string;
         city?: string;
     }): Promise<ApiResponse<Umami.WebsitePageviews>>;
     getWebsiteStats(websiteId: string, params: {
         startAt: number;
         endAt: number;
-        url: string;
+        url?: string;
         referrer?: string;
         title?: string;
         query?: string;
@@ -330,8 +341,7 @@ declare class UmamiApiClient {
     deleteTeamWebsite(teamId: string, websiteId: string): Promise<ApiResponse<Umami.Empty>>;
     updateTeam(teamId: string, data: {
         name: string;
-        domain: string;
-        shareId: string;
+        accessCode: string;
     }): Promise<ApiResponse<Umami.Empty>>;
     deleteTeam(teamId: string): Promise<ApiResponse<Umami.Empty>>;
     login(username: string, password: string): Promise<{
diff --git a/dist/esm/index.js b/dist/esm/index.js
index 2399548e3d1c48eba193a45f9224357ed4c817d5..4b639d46f4c958d419d2bdb7a09049fadcb81256 100644
--- a/dist/esm/index.js
+++ b/dist/esm/index.js
@@ -16,32 +16,25 @@ var __assign = function () {
 function __awaiter(thisArg, _arguments, P, generator) {
     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
     return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) {
-            try {
-                step(generator.next(value));
-            }
-            catch (e) {
-                reject(e);
-            }
+        function fulfilled(value) { try {
+            step(generator.next(value));
         }
-        function rejected(value) {
-            try {
-                step(generator["throw"](value));
-            }
-            catch (e) {
-                reject(e);
-            }
+        catch (e) {
+            reject(e);
+        } }
+        function rejected(value) { try {
+            step(generator["throw"](value));
         }
+        catch (e) {
+            reject(e);
+        } }
         function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
         step((generator = generator.apply(thisArg, _arguments || [])).next());
     });
 }
 function __generator(thisArg, body) {
-    var _ = { label: 0, sent: function () {
-            if (t[0] & 1)
-                throw t[1];
-            return t[1];
-        }, trys: [], ops: [] }, f, y, t, g;
+    var _ = { label: 0, sent: function () { if (t[0] & 1)
+            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
     return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
     function verb(n) { return function (v) { return step([n, v]); }; }
     function step(op) {
@@ -108,6 +101,10 @@ function __generator(thisArg, body) {
         return { value: op[0] ? op[1] : void 0, done: true };
     }
 }
+typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
+    var e = new Error(message);
+    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
+};
 
 var log = debug('umami:api-client');
 var API_KEY_HEADER = 'x-umami-api-key';
@@ -307,6 +304,20 @@ var UmamiApiClient = (function () {
             });
         });
     };
+    UmamiApiClient.prototype.getWebsiteReports = function (websiteId) {
+        return __awaiter(this, void 0, void 0, function () {
+            return __generator(this, function (_a) {
+                return [2, this.get("websites/".concat(websiteId, "/reports"))];
+            });
+        });
+    };
+    UmamiApiClient.prototype.getWebsiteValues = function (websiteId, params) {
+        return __awaiter(this, void 0, void 0, function () {
+            return __generator(this, function (_a) {
+                return [2, this.get("websites/".concat(websiteId, "/values"), params)];
+            });
+        });
+    };
     UmamiApiClient.prototype.getWebsiteEventData = function (websiteId, params) {
         return __awaiter(this, void 0, void 0, function () {
             return __generator(this, function (_a) {
@@ -567,6 +578,18 @@ var UmamiApiClient = (function () {
             var _this = this;
             return __generator(this, function (_a) {
                 routes = [
+                    {
+                        path: /^admin\/users$/,
+                        get: function (_a, data) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
+                            return [2, this.getUsers(data)];
+                        }); }); },
+                    },
+                    {
+                        path: /^admin\/websites$/,
+                        get: function (_a, data) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
+                            return [2, this.getWebsites(data)];
+                        }); }); },
+                    },
                     {
                         path: /^event-data\/events$/,
                         get: function (_a, data) {
@@ -763,19 +786,10 @@ var UmamiApiClient = (function () {
                         },
                     },
                     {
-                        path: /^admin\/users$/,
+                        path: /^users$/,
                         get: function (_a, data) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
                             return [2, this.getUsers(data)];
                         }); }); },
-                    },
-                    {
-                        path: /^admin\/websites$/,
-                        get: function (_a, data) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
-                            return [2, this.getWebsites(data)];
-                        }); }); },
-                    },
-                    {
-                        path: /^users$/,
                         post: function (_a, data) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
                             return [2, this.createUser(data)];
                         }); }); },
@@ -867,6 +881,15 @@ var UmamiApiClient = (function () {
                             }); });
                         },
                     },
+                    {
+                        path: /^websites\/[0-9a-f-]+\/daterange$/,
+                        get: function (_a) {
+                            var id = _a[1];
+                            return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_b) {
+                                return [2, this.getWebsiteActive(id)];
+                            }); });
+                        },
+                    },
                     {
                         path: /^websites\/[0-9a-f-]+\/events$/,
                         get: function (_a, data) {
@@ -894,6 +917,13 @@ var UmamiApiClient = (function () {
                             }); });
                         },
                     },
+                    {
+                        path: /^websites\/[0-9a-f-]+\/reports$/,
+                        post: function (_a) {
+                            var id = _a[1];
+                            return _this.getWebsiteReports(id);
+                        },
+                    },
                     {
                         path: /^websites\/[0-9a-f-]+\/reset$/,
                         post: function (_a) {
@@ -917,6 +947,13 @@ var UmamiApiClient = (function () {
                             return _this.transferWebsite(id, data);
                         },
                     },
+                    {
+                        path: /^websites\/[0-9a-f-]+\/values$/,
+                        pogetst: function (_a, data) {
+                            var id = _a[1];
+                            return _this.getWebsiteValues(id, data);
+                        },
+                    },
                 ];
                 route = routes.find(function (_a) {
                     var path = _a.path;
